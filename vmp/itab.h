

#ifndef    __MY_ITAB_H
#define    __MY_ITAB_H


typedef enum __jcc_code
{
	w_o,
	w_b,
	w_z,
	w_be,
	w_p,
	w_l,
	w_s,
	w_le
}_jcc_code;

typedef enum __prefix_reg_code
{
	w_es,
	w_cs,
	w_ss,
	w_ds,
	w_fs,
	w_gs
}_prefix_reg_code;

typedef enum __reg_code
{
	w_cl,
	w_dl,
	w_bl,
	w_ah,
	w_ch,
	w_dh,
	w_bh,
	w_ax,
	w_cx,
	w_dx,
	w_bx,
	w_sp,
	w_bp,
	w_si,
	w_di,
	w_eax,
	w_ecx,
	w_edx,
	w_ebx,
	w_esp,
	w_ebp,
	w_esi,
	w_edi,
	w_rax,
	w_rcx,
	w_rdx,
	w_rbx,
	w_rsp,
	w_rbp,
	w_rsi,
	w_rdi
}_reg_code;

typedef enum __lval_code
{
	w_byte,
	w_word,
	w_dword,
	w_qword,
	w_tbyte
}_lval_code;


typedef enum __mnemonic_code
{
	w_popfd_popad = -2,
	w_pushad_pushfd = -1,
	w_none,
	w_push,
	w_pop,
	w_mov,
	w_add,
	w_xor,
	w_test,
	w_lea,
	w_inc,
	w_dec,
	w_les,
	w_lds,
	w_lfs,
	w_lgs,
	w_lss,
	w_xadd,
	w_bswap,
	w_j,
	w_and,
	w_sub,
	w_stos,
	w_lods,
	w_nop,
	w_xchg,
	w_pushf,
	w_popf,
	w_sahf,
	w_lahf,
	w_shl,
	w_shr,
	w_sal,
	w_sar,
	w_rcl,
	w_rcr,
	w_rol,
	w_ror,
	w_shld,
	w_shrd,
	w_loope,
	w_loopne,
	w_loop,
	w_jczx,
	w_in,
	w_ins,
	w_out,
	w_outs,
	w_wait,
	w_cbw,
	w_cwde,
	w_cdqe,
	w_cwd,
	w_cdq,
	w_cqo,
	w_clc,
	w_stc,
	w_cli,
	w_sti,
	w_cld,
	w_std,
	w_not,
	w_neg,
	w_div,
	w_imul,
	w_idiv,
	w_mul,
	w_or,
	w_adc,
	w_cmp,
	w_sbb,
	w_pusha,
	w_popa,
	w_clflush,
	w_lfence,
	w_bound,
	w_arpl,
	w_daa,
	w_das,
	w_aaa,
	w_aam,
	w_aad,
	w_aas,
	w_enter,
	w_leave,
	w_int,
	w_into,
	w_iret,
	w_set,
	w_cmov,
	w_movd,
	w_movq,
	w_psrl,
	w_psra,
	w_psll,
	w_pcubus,
	w_paddus,
	w_psubs,
	w_padds,
	w_psub,
	w_padd,
	w_punpcklbw,
	w_punpcklwd,
	w_punpckldq,
	w_packusdw,
	w_pcmpgtb,
	w_pcmpgtw,
	w_pcmpgtd,
	w_pcmpeqb,
	w_pcmpeqw,
	w_pcmpeqd,
	w_emms,
	w_packsswb,
	w_punpckhbw,
	w_punpckhwd,
	w_punpckhdq,
	w_packssdw,
	w_pand,
	w_pandn,
	w_por,
	w_pxor,
	w_pmullw,
	w_pmulhw,
	w_pmaddwd,
	w_movzx,
	w_movsx,
	w_bt,
	w_bts,
	w_btr,
	w_btc,
	w_movs,
	w_cmps,
	w_scas,
	w_xlat,
	w_cpuid,
	w_rsm,
	w_bsf,
	w_bsr,
	w_cmpxchg,
	w_cmpxchg8b,
	w_db,
	w_dd,
	w_lock,
	w_repe,
	w_repne,
	w_rep,
	w_hlt,
	w_cmc,
	w_lgdt,
	w_sgdt,
	w_lidt,
	w_sidt,
	w_lar,
	w_lsl,
	w_ctls,
	w_invd,
	w_wbinvd,
	w_ud2,
	w_wrmsr,
	w_rdtsc,
	w_rdmsr,
	w_rdpmc,
	w_fadd,
	w_fmul,
	w_fcom,
	w_fcomp,
	w_fsub,
	w_fsubr,
	w_fdiv,
	w_fdivr,
	w_fiadd,
	w_fimul,
	w_ficom,
	w_ficomp,
	w_fisub,
	w_fisubr,
	w_fidiv,
	w_fidivr,
	w_faddp,
	w_fmulp,
	w_fsubp,
	w_fsubrp,
	w_fdivp,
	w_fdivrp,
	w_fild,
	w_fist,
	w_fistp,
	w_fbld,
	w_fbstp,
	w_fld,
	w_fstp,
	w_ffree,
	w_frstor,
	w_fsave,
	w_fucom,
	w_fucomp,
	w_fst,
	w_fldenv,
	w_fldcw,
	w_fstenvm,
	w_fstcw,
	w_fxch,
	w_fchs,
	w_fabs,
	w_xam,
	w_fld1,
	w_fldl2t,
	w_fldl2e,
	w_fldlpl,
	w_fldlg2,
	w_fldln2,
	w_fldz,
	w_fyl2x,
	w_fptan,
	w_fpatan,
	w_fxtract,
	w_fprem1,
	w_fdecstp,
	w_fincstp,
	w_fprem,
	w_fyl2xp1,
	w_fsqrt,
	w_fsincos,
	w_frndint,
	w_fscale,
	w_fsin,
	w_fcos,
	w_ftst,
	w_fstenv,
	w_f2xm1,
	w_fnop,
	w_finit,
	w_fclex,
	w_fcompp,
	w_fcmovnb,
	w_fcmovne,
	w_fcmovnbe,
	w_fcmovnu,
	w_fucomi,
	w_fcomi,
	w_fstsw,
	w_fcmovb,
	w_fcmove,
	w_fcmovbe,
	w_fcmovu,
	w_fucompp,
	w_call,
	w_jmp,
	w_ssh,
	w_retf,
	w_ret,
}_mnemonic_code;

const char * _tpye[];
const char * _mnemonics_str[];

#endif     __MY_ITAB_H