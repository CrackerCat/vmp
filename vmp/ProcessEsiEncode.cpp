


#include "StdAfx.h"
#include "extern.h"

#define   _HANDLE_SIZE   0x100
#define   _BASEADDR      0x400000

#define   _CLAC1( a, b, c)      ( a - b + c)
#define   _CLAC2( a, b, c)      ( a + b + c)

vector<_struct_data> vc;
vector<_struct_data> sim_vc;

char _vmp_regulation_size[] = {
	0x2
	,0x5
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x2
	,0x3
	,0x3
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x2
	,0x2
	,0x2
	,0x2
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x2
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x2
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x2
	,0x2
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
	,0x1
};

char _vmp_regulation[] = {
	0x1,0x2,0x2,0x0,0x0,0x0,0x0,0x0
	,0x1,0x1,0x2,0x0,0x0,0x0,0x0,0x0
	,0x1,0x2,0x2,0x0,0x1,0x0,0x0,0x0
	,0x1,0x3,0x2,0x0,0x0,0x0,0x0,0x0
	,0x1,0x3,0x2,0x0,0x1,0x0,0x0,0x0
	,0x1,0x3,0x2,0x0,0x2,0x0,0x0,0x0
	,0x1,0x3,0x2,0x0,0x3,0x0,0x0,0x0
	,0x1,0x3,0x2,0x0,0x4,0x0,0x0,0x0
	,0x1,0x3,0x2,0x0,0x5,0x0,0x0,0x0
	,0x1,0x2,0x1,0x0,0x0,0x0,0x0,0x0
	,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0
	,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0
	,0x1,0x3,0x1,0x0,0x0,0x0,0x0,0x0
	,0x1,0x3,0x1,0x0,0x1,0x0,0x0,0x0
	,0x1,0x3,0x1,0x0,0x2,0x0,0x0,0x0
	,0x1,0x3,0x1,0x0,0x3,0x0,0x0,0x0
	,0x1,0x3,0x1,0x0,0x4,0x0,0x0,0x0
	,0x1,0x3,0x1,0x0,0x5,0x0,0x0,0x0
	,0x1,0x2,0x0,0x0,0x0,0x0,0x0,0x0
	,0x1,0x2,0x0,0x0,0x1,0x0,0x0,0x0
	,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0
	,0x1,0x1,0x0,0x0,0x1,0x0,0x0,0x0
	,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0
	,0x1,0x3,0x0,0x0,0x1,0x0,0x0,0x0
	,0x1,0x3,0x0,0x0,0x2,0x0,0x0,0x0
	,0x1,0x3,0x0,0x0,0x3,0x0,0x0,0x0
	,0x1,0x3,0x0,0x0,0x4,0x0,0x0,0x0
	,0x1,0x3,0x0,0x0,0x5,0x0,0x0,0x0
	,0x1,0x5,0x1,0x0,0x0,0x0,0x0,0x0
	,0x1,0x5,0x1,0x0,0x1,0x0,0x0,0x0
	,0x1,0x5,0x1,0x0,0x2,0x0,0x0,0x0
	,0x1,0x5,0x1,0x0,0x3,0x0,0x0,0x0
	,0x1,0x5,0x1,0x0,0x4,0x0,0x0,0x0
	,0x1,0x5,0x1,0x0,0x5,0x0,0x0,0x0
	,0x1,0x2,0x1,0x0,0x1,0x0,0x0,0x0
	,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x0
	,0x2,0x1,0x2,0x0,0x0,0x0,0x0,0x0
	,0x2,0x2,0x2,0x0,0x1,0x0,0x0,0x0
	,0x2,0x3,0x2,0x0,0x0,0x0,0x0,0x0
	,0x2,0x3,0x2,0x0,0x1,0x0,0x0,0x0
	,0x2,0x3,0x2,0x0,0x2,0x0,0x0,0x0
	,0x2,0x3,0x2,0x0,0x3,0x0,0x0,0x0
	,0x2,0x3,0x2,0x0,0x4,0x0,0x0,0x0
	,0x2,0x3,0x2,0x0,0x5,0x0,0x0,0x0
	,0x2,0x2,0x1,0x0,0x0,0x0,0x0,0x0
	,0x2,0x1,0x1,0x0,0x0,0x0,0x0,0x0
	,0x2,0x3,0x1,0x0,0x0,0x0,0x0,0x0
	,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0
	,0x2,0x3,0x1,0x0,0x2,0x0,0x0,0x0
	,0x2,0x3,0x1,0x0,0x3,0x0,0x0,0x0
	,0x2,0x3,0x1,0x0,0x4,0x0,0x0,0x0
	,0x2,0x3,0x1,0x0,0x5,0x0,0x0,0x0
	,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0
	,0x2,0x2,0x0,0x0,0x1,0x0,0x0,0x0
	,0x1,0x6,0x2,0x0,0x0,0x0,0x0,0x0
	,0x1,0x6,0x2,0x0,0x1,0x0,0x0,0x0
	,0x1,0x6,0x2,0x0,0x2,0x0,0x0,0x0
	,0x1,0x6,0x2,0x0,0x3,0x0,0x0,0x0
	,0x1,0x6,0x2,0x0,0x4,0x0,0x0,0x0
	,0x1,0x6,0x2,0x0,0x5,0x0,0x0,0x0
	,0x1,0x6,0x2,0x0,0x6,0x0,0x0,0x0
	,0x1,0x6,0x2,0x0,0x7,0x0,0x0,0x0
	,0x2,0x6,0x2,0x0,0x0,0x0,0x0,0x0
	,0x2,0x6,0x2,0x0,0x1,0x0,0x0,0x0
	,0x2,0x6,0x2,0x0,0x2,0x0,0x0,0x0
	,0x2,0x6,0x2,0x0,0x3,0x0,0x0,0x0
	,0x2,0x6,0x2,0x0,0x4,0x0,0x0,0x0
	,0x2,0x6,0x2,0x0,0x5,0x0,0x0,0x0
	,0x2,0x6,0x2,0x0,0x6,0x0,0x0,0x0
	,0x2,0x6,0x2,0x0,0x7,0x0,0x0,0x0
	,0x1,0x7,0x2,0x0,0x0,0x0,0x0,0x0
	,0x1,0x7,0x2,0x0,0x1,0x0,0x0,0x0
	,0x1,0x7,0x2,0x0,0x2,0x0,0x0,0x0
	,0x1,0x7,0x2,0x0,0x3,0x0,0x0,0x0
	,0x1,0x7,0x2,0x0,0x4,0x0,0x0,0x0
	,0x1,0x7,0x2,0x0,0x5,0x0,0x0,0x0
	,0x1,0x7,0x2,0x0,0x6,0x0,0x0,0x0
	,0x1,0x7,0x2,0x0,0x7,0x0,0x0,0x0
	,0x2,0x7,0x2,0x0,0x0,0x0,0x0,0x0
	,0x2,0x7,0x2,0x0,0x1,0x0,0x0,0x0
	,0x2,0x7,0x2,0x0,0x2,0x0,0x0,0x0
	,0x2,0x7,0x2,0x0,0x3,0x0,0x0,0x0
	,0x2,0x7,0x2,0x0,0x4,0x0,0x0,0x0
	,0x2,0x7,0x2,0x0,0x5,0x0,0x0,0x0
	,0x2,0x7,0x2,0x0,0x6,0x0,0x0,0x0
	,0x2,0x7,0x2,0x0,0x7,0x0,0x0,0x0
	,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x0
	,0x2,0x3,0x0,0x0,0x0,0x0,0x0,0x0
	,0x2,0x3,0x0,0x0,0x1,0x0,0x0,0x0
	,0x2,0x3,0x0,0x0,0x2,0x0,0x0,0x0
	,0x2,0x3,0x0,0x0,0x3,0x0,0x0,0x0
	,0x2,0x3,0x0,0x0,0x4,0x0,0x0,0x0
	,0x2,0x3,0x0,0x0,0x5,0x0,0x0,0x0
	,0x2,0x5,0x1,0x0,0x0,0x0,0x0,0x0
	,0x2,0x5,0x1,0x0,0x2,0x0,0x0,0x0
	,0x2,0x5,0x1,0x0,0x3,0x0,0x0,0x0
	,0x2,0x5,0x1,0x0,0x4,0x0,0x0,0x0
	,0x2,0x5,0x1,0x0,0x5,0x0,0x0,0x0
	,0x2,0x2,0x1,0x0,0x1,0x0,0x0,0x0
	,0x4,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0x4,0x0,0x2,0x0,0x1,0x0,0x0,0x0
	,0x4,0x0,0x1,0x0,0x0,0x0,0x0,0x0
	,0x4,0x0,0x1,0x0,0x1,0x0,0x0,0x0
	,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x4,0x0,0x0,0x0,0x1,0x0,0x0,0x0
	,0xF6,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xF6,0x0,0x2,0x0,0x1,0x0,0x0,0x0
	,0xF6,0x0,0x1,0x0,0x0,0x0,0x0,0x0
	,0xF6,0x0,0x1,0x0,0x1,0x0,0x0,0x0
	,0xF6,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0xF6,0x0,0x0,0x0,0x1,0x0,0x0,0x0
	,0x1C,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0x1C,0x0,0x2,0x0,0x1,0x0,0x0,0x0
	,0x1C,0x0,0x1,0x0,0x0,0x0,0x0,0x0
	,0x1C,0x0,0x1,0x0,0x1,0x0,0x0,0x0
	,0x1C,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x1C,0x0,0x0,0x0,0x1,0x0,0x0,0x0
	,0x1D,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0x1D,0x0,0x2,0x0,0x1,0x0,0x0,0x0
	,0x1D,0x0,0x1,0x0,0x0,0x0,0x0,0x0
	,0x1D,0x0,0x1,0x0,0x1,0x0,0x0,0x0
	,0x1D,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x1D,0x0,0x0,0x0,0x1,0x0,0x0,0x0
	,0xF8,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0x3D,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0x3D,0x0,0x1,0x0,0x0,0x0,0x0,0x0
	,0x3D,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x3F,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0x3F,0x0,0x1,0x0,0x0,0x0,0x0,0x0
	,0x3F,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	,0x40,0x0,0x2,0x0,0x1,0x0,0x0,0x0
	,0x40,0x0,0x1,0x0,0x1,0x0,0x0,0x0
	,0x40,0x0,0x0,0x0,0x1,0x0,0x0,0x0
	,0x3E,0x0,0x2,0x0,0x1,0x0,0x0,0x0
	,0x3E,0x0,0x1,0x0,0x1,0x0,0x0,0x0
	,0x3E,0x0,0x0,0x0,0x1,0x0,0x0,0x0
	,0x1C,0x0,0x3,0x0,0x1,0x0,0x0,0x0
	,0x1D,0x0,0x3,0x0,0x1,0x0,0x0,0x0
	,0xF7,0x0,0x2,0x0,0x1,0x0,0x0,0x0
	,0x2E,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xB6,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xB6,0x0,0x3,0x0,0x0,0x0,0x0,0x0
	,0xBB,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xBB,0x0,0x3,0x0,0x0,0x0,0x0,0x0
	,0xBB,0x0,0x4,0x0,0x0,0x0,0x0,0x0
	,0xA0,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xA0,0x0,0x3,0x0,0x0,0x0,0x0,0x0
	,0xA4,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xA4,0x0,0x3,0x0,0x0,0x0,0x0,0x0
	,0xA5,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xA5,0x0,0x3,0x0,0x0,0x0,0x0,0x0
	,0xBC,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xBC,0x0,0x3,0x0,0x0,0x0,0x0,0x0
	,0xBC,0x0,0x4,0x0,0x0,0x0,0x0,0x0
	,0xA6,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xA6,0x0,0x3,0x0,0x0,0x0,0x0,0x0
	,0xA1,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xA1,0x0,0x3,0x0,0x0,0x0,0x0,0x0
	,0xA3,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xA3,0x0,0x3,0x0,0x0,0x0,0x0,0x0
	,0xC8,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xDB,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xEE,0x0,0x1,0x0,0x0,0x0,0x0,0x0
	,0xC6,0x0,0x1,0x0,0x0,0x0,0x0,0x0
	,0xC4,0x0,0x1,0x0,0x0,0x0,0x0,0x0
	,0xE3,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xC9,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xE6,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xE0,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xD7,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xD8,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xE5,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xD0,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xCF,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xD9,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xD6,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xD3,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xDD,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xDF,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xE1,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xD2,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xD4,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xD1,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xB8,0x0,0x1,0x0,0x0,0x0,0x0,0x0
	,0xB8,0x0,0x2,0x0,0x0,0x0,0x0,0x0
	,0xB8,0x0,0x3,0x0,0x0,0x0,0x0,0x0
};

struct _matching_size
{
	char _offset;
	char _vm_opcode[100+3];
};

struct _matching_size _ms[4] = {
	{ 0x21,0x9C,0x60,0x68,0x00,0x00,0x00,0x00,0x8B,0x74,0x24,0x28,0xBF,0x78,0x56,0x34,0x12,0xFC,0x89,0xF3,0x2B,0x1C,0x24,0xAC,0x00,0xD8,0x00,0xC3,0x0F,0xB6,0xC0,0xFF,0x24,0x85},
	{ 0x4F,0x9C,0x60,0x68,0x00,0x00,0x00,0x00,0x8B,0x74,0x24,0x28,0xBA,0x78,0x56,0x34,0x12,0xFC,0xFF,0x15,0x4E,0x61,0xBC,0x00,0x89,0xC3,0xB9,0x00,0x01,0x00,0x00,0x89,0xD7,0xF2,0xAF,0x74,0x0D,0xB8,0x00,0x01,0x00,0x00,0x91,0x89,0xD7,0xF2,0xAF,0x89,0x5F,0xFC,0x89,0xFD,0x29,0xD7,0xC1,0xE7,0x04,0x8D,0xBC,0x3A,0xC0,0x03,0x00,0x00,0x89,0xF3,0x2B,0x1C,0x24,0xAC,0x00,0xD8,0x00,0xC3,0x0F,0xB6,0xC0,0xFF,0x24,0x85},
	{ 0x18,0x9C,0x60,0x68,0x00,0x00,0x00,0x00,0x8B,0x74,0x24,0x28,0xBF,0x78,0x56,0x34,0x12,0xFC,0xAC,0x0F,0xB6,0xC0,0xFF,0x24,0x85},
	{ 0x46,0x9C,0x60,0x68,0x00,0x00,0x00,0x00,0x8B,0x74,0x24,0x28,0xBA,0x78,0x56,0x34,0x12,0xFC,0xFF,0x15,0x4E,0x61,0xBC,0x00,0x89,0xC3,0xB9,0x00,0x01,0x00,0x00,0x89,0xD7,0xF2,0xAF,0x74,0x0D,0xB8,0x00,0x01,0x00,0x00,0x91,0x89,0xD7,0xF2,0xAF,0x89,0x5F,0xFC,0x89,0xFD,0x29,0xD7,0xC1,0xE7,0x04,0x8D,0xBC,0x3A,0xC0,0x03,0x00,0x00,0xAC,0x0F,0xB6,0xC0,0xFF,0x24,0x85}
};

//这里对应4套
int vm_handle_offset[] = {
	0x0000001C
	,0x00000022
	,0x00000027
	,0x00000041
	,0x00000047
	,0x0000003B
	,0x00000036
	,0x00000030
	,0x0000002A
	,0x0000004D
	,0x00000054
	,0x0000005A
	,0x0000007B
	,0x00000082
	,0x00000074
	,0x0000006E
	,0x00000067
	,0x00000060
	,0x00000089
	,0x00000091
	,0x0000009D
	,0x000000A5
	,0x000000DA
	,0x000000E5
	,0x000000CF
	,0x000000C5
	,0x000000BA
	,0x000000AF
	,0x0000010E
	,0x00000115
	,0x000000FF
	,0x000000F8
	,0x00000106
	,0x000000F0
	,0x00000026
	,0x0000011C
	,0x00000126
	,0x0000012D
	,0x00000156
	,0x0000015F
	,0x0000014D
	,0x00000145
	,0x0000013C
	,0x00000133
	,0x00000168
	,0x00000125
	,0x00000199
	,0x000001A3
	,0x0000018F
	,0x00000186
	,0x0000017C
	,0x00000172
	,0x000001AD
	,0x000001B8
	,0x000004D0
	,0x000004D9
	,0x000004E2
	,0x000004EB
	,0x000004F4
	,0x000004FD
	,0x00000506
	,0x0000050F
	,0x00000518
	,0x00000521
	,0x0000052A
	,0x00000533
	,0x0000053C
	,0x00000545
	,0x0000054E
	,0x00000557
	,0x00000440
	,0x00000449
	,0x00000452
	,0x0000045B
	,0x00000464
	,0x0000046D
	,0x00000476
	,0x0000047F
	,0x00000488
	,0x00000491
	,0x0000049A
	,0x000004A3
	,0x000004AC
	,0x000004B5
	,0x000004BE
	,0x000004C7
	,0x00000125
	,0x000001EF
	,0x000001FA
	,0x000001E4
	,0x000001DA
	,0x000001CF
	,0x000001C4
	,0x00000223
	,0x00000214
	,0x0000020D
	,0x0000021B
	,0x00000205
	,0x0000012C
	,0x0000022A
	,0x00000233
	,0x0000023E
	,0x00000249
	,0x00000256
	,0x00000260
	,0x0000026C
	,0x0000027A
	,0x0000028A
	,0x00000298
	,0x000002A8
	,0x000002B9
	,0x000002DB
	,0x000002E6
	,0x000002F3
	,0x00000301
	,0x00000311
	,0x0000031E
	,0x0000033C
	,0x00000347
	,0x00000354
	,0x00000362
	,0x00000372
	,0x0000037F
	,0x000006C7
	,0x0000038E
	,0x0000039A
	,0x000003AC
	,0x000003B9
	,0x000003C5
	,0x000003D7
	,0x000003E4
	,0x000003F1
	,0x00000403
	,0x00000412
	,0x0000041F
	,0x00000431
	,0x000002CC
	,0x0000032D
	,0x000006C3
	,0x00000560
	,0x0000056F
	,0x00000577
	,0x0000057F
	,0x00000587
	,0x0000058F
	,0x00000597
	,0x0000059F
	,0x000005A7
	,0x000005AF
	,0x000005B7
	,0x000005BF
	,0x000005C7
	,0x000005CF
	,0x000005D7
	,0x000005F7
	,0x000005FF
	,0x00000607
	,0x0000060F
	,0x00000617
	,0x0000061F
	,0x00000637
	,0x0000063E
	,0x00000566
	,0x00000627
	,0x0000062F
	,0x00000645
	,0x0000064C
	,0x00000653
	,0x0000065A
	,0x00000661
	,0x00000668
	,0x0000066F
	,0x00000676
	,0x0000067D
	,0x00000692
	,0x00000699
	,0x000006A0
	,0x000006A7
	,0x000006AE
	,0x000006B5
	,0x000006BC
	,0x0000068B
	,0x00000684
	,0x000005DF
	,0x000005E7
	,0x000005EF
};

int _var_index[_var_size] = {0,1,2,4};

int _sure_context = 0;
const int _ffcontext = 6;
const int _contextsize = 16;
char _context[16] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};

static int _get_handle_type( char *_buf)
{
	int _ret = -1;
	char *p = _buf;
	for( int i = 0; i < 4; i++)
	{
		int _size = _ms[i]._offset - 1;
		int j = 0;
		for( ; j < _size; )
		{
			//去除reloc
			if( j == 0xc || j == 0x4)
			{
				j += 4;
				continue;
			}
			if( p[j] == _ms[i]._vm_opcode[j])
			{
				j++;
			}
			else
			{
				break;
			}
		}
		if( j == _size)
		{
			_ret = i;
			break;
		}
	}
	return _ret;
};

/************************************************************************/
/* init                                                                 */
/************************************************************************/
ProcessEsiEncode::ProcessEsiEncode()
{

}

ProcessEsiEncode::ProcessEsiEncode( int _entry)
{
	_section_offset = 0;
	_vm_pos_dispathcer = 0;
	_vm_entry = _entry;
}


ProcessEsiEncode::~ProcessEsiEncode()
{

}

/************************************************************************/
/* other                                                                */
/************************************************************************/
char vmp_get_index( char _n)
{
	char _ret = 0;
	switch( _n)
	{
	case 0:
		{
			_ret = 1;
			break;
		}
	case 1:
		{
			_ret = 2;
			break;
		}
	case 2:
		{
			_ret = 3;
			break;
		}
	case 4:
		{
			_ret = 5;
			break;
		}
	case 5:
		{
			_ret = 6;
			break;
		}
	default:
		{
			_ret = 0;
			break;
		}
	}
	return _ret;
}

int exincludeContextIndex( int i)
{
	return i != 4 && i < 11;
}

int _icontext = 0;
char REvmp_getContextIndex( char data)
{
	for( int i = 0; i < _contextsize; i++)
	{
		if( data == _context[i])
		{
			_icontext++;
			return i;
		}
	}
	if(  _sure_context != _contextsize - _ffcontext - 1 && _icontext != 4)
	{
		for( int i = 0; i < _contextsize; i++)
		{
			if( exincludeContextIndex(i) && _context[i] == -1)
			{
				_sure_context++;
				_context[i] = data;
				return i;
			}
		}
	}
	return -1;
}

void REvmp_findandsettostruct_func101( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = 0;
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;
	if( s._var[4] != 0)
	{
		tmp._other = 1;
	}

	tmp._rva = s._rva;

	sim_vc.push_back(tmp);
}

void REvmp_findandsettostruct_func104( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = 0;
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;

	tmp._rva = s._rva;

	sim_vc.push_back(tmp);
}

void REvmp_findandsettostruct_func3( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = 0;
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;

	tmp._rva = s._rva;


	sim_vc.push_back(tmp);
}

/************************************************************************/
/* type1                                                                */
/************************************************************************/
int vmp_FindAndSetToStruct_lodsb_push( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 1 && s._var[2] == 0 && s._var[3] == 0;
}

void REvmp_FindAndSetToStruct_lodsb_push( const _struct_data& s)
{
	_struct_data tmp;

	tmp._var[0] = 1;
	tmp._var[1] = 1;
	tmp._var[2] = 1;//这里可1 0,不确定
	tmp._var[3] = 0;
	
	tmp._rva = s._rva;

	tmp._lval = 1;
	tmp._size = 2;
	tmp._data = s._data;
	sim_vc.push_back( tmp);
}

int vmp_FindAndSetToStruct_lodsb_cwde_push( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 1 && s._var[2] == 0 && s._var[3] == 1;
}

void REvmp_FindAndSetToStruct_lodsb_cwde_push( const _struct_data& s)
{
	_struct_data tmp;

	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = 2;
	tmp._var[3] = 0;

	tmp._rva = s._rva;

	tmp._lval = 1;
	tmp._size = 2;
	tmp._data = s._data;
	tmp._other = 1;
	sim_vc.push_back( tmp);
}

int vmp_FindAndSetToStruct_lodsw_push( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 1 && s._var[2] == 1 && s._var[3] == 0;
}

void REvmp_FindAndSetToStruct_lodsw_push( const _struct_data& s)
{
	_struct_data tmp;

	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = 1;
	tmp._var[3] = 0;

	tmp._rva = s._rva;
	
	tmp._lval = 2;
	tmp._size = 3;
	tmp._data = s._data;
	sim_vc.push_back( tmp);
}

int vmp_FindAndSetToStruct_lodsw_cwde_push( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 1 && s._var[2] == 1 && s._var[3] == 1;
}

void REvmp_FindAndSetToStruct_lodsw_cwde_push( const _struct_data& s)
{
	_struct_data tmp;

	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = 2;
	tmp._var[3] = 0;

	tmp._rva = s._rva;
	
	tmp._lval = 2;
	tmp._size = 3;
	tmp._data = s._data;
	tmp._other = 1;
	sim_vc.push_back( tmp);
}

int vmp_FindAndSetToStruct_lodsd_push( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 1 && s._var[2] == 2 && s._var[3] == 0;
}

void REvmp_FindAndSetToStruct_lodsd_push( const _struct_data& s)
{
	_struct_data tmp;

	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;
	
	tmp._rva = s._rva;
	
	tmp._lval = 2;
	tmp._size = 5;
	tmp._data = s._data;


	sim_vc.push_back( tmp);
}

/************************************************************************/
/* type2                                                                */
/************************************************************************/

int vmp_FindAndSetToStruct_push_context_byte( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 2 && s._var[3] == 0;
}

void REvmp_FindAndSetToStruct_push_context_btye( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;

	tmp._rva = s._rva;

	//寄存器
	if( s._var[3] == 1)
	{
		tmp._reg = 4;
	}
	else
	{	
		char nRet = REvmp_getContextIndex(s._data);
		tmp._reg = nRet;
	//	printf("%x\n",nRet);
	}

	sim_vc.push_back( tmp);
}

int vmp_FindAndSetToStruct_push_context_word( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 2 && s._var[2] == 1 && s._var[3] == 0;
}

void REvmp_FindAndSetToStruct_push_context_word( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;

	tmp._rva = s._rva;

	//寄存器

	char nRet = REvmp_getContextIndex(s._data);
	tmp._reg = nRet;
//	printf("%x\n",nRet);

	sim_vc.push_back(tmp);
}

int vmp_FindAndSetToStruct_push_context_dword( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 2 && s._var[2] == 2 && s._var[3] == 0;
}

void REvmp_FindAndSetToStruct_push_context_dword( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;

	tmp._rva = s._rva;

	//寄存器

	char nRet = REvmp_getContextIndex(s._data);
	tmp._reg = nRet;
//	printf("%x\n",nRet);

	sim_vc.push_back(tmp);
}

int vmp_FindAndSetToStruct_push_esp_sp( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 2 && s._var[3] == 1 && 
		( s._var[2] == 1 || s._var[2] == 2);
}

void REvmp_FindAndSetToStruct_push_esp_sp( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;
	tmp._reg = 4;

	tmp._rva = s._rva;

	sim_vc.push_back( tmp);
}

int vmp_FindAndSetToStruct_push_segment_mem( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 3;
}

void REvmp_FindAndSetToStruct_push_segment_mem( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] =  vmp_get_index(s._var[3]);

	tmp._rva = s._rva;

	sim_vc.push_back( tmp);
}

int vmp_FindAndSetToStruct_push_segment( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 5;
}

void REvmp_FindAndSetToStruct_push_segment( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;
	tmp._reg = s._var[3];

	tmp._rva = s._rva;

	sim_vc.push_back( tmp);
}

int vmp_FindAndSetToStruct_push_crindex( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 6;
}

void REvmp_FindAndSetToStruct_push_crindex( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;
	tmp._reg = s._var[3];

	tmp._rva = s._rva;

	sim_vc.push_back( tmp);
}

int vmp_FindAndSetToStruct_push_drindex( const _struct_data& s)
{
	return s._var[0] == 1 && s._var[1] == 7;
}

void REvmp_FindAndSetToStruct_push_drindex( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;
	tmp._reg = s._var[3];

	tmp._rva = s._rva;

	sim_vc.push_back( tmp);
}

/************************************************************************/
/* tpye3                                                                */
/************************************************************************/

int vmp_FindAndSetToStruct_pop_ax_eax( const _struct_data& s)
{
	return s._var[0] == 2 && s._var[1] == 1 && s._var[3] == 0;
}

void REvmp_FindAndSetToStruct_pop_ax_eax( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];;
	tmp._var[3] = 0;

	tmp._rva = s._rva;

	sim_vc.push_back( tmp);
}

int vmp_FindAndSetToStruct_pop_context_byte( const _struct_data& s)
{
	return s._var[0] == 2 && s._var[1] == 2 && s._var[2] == 0;
}

void REvmp_FindAndSetToStruct_pop_context_byte( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;

	tmp._rva = s._rva;

	//寄存器
	if( s._var[3] == 1)
	{
		tmp._reg = 4;
	}
	else
	{
		char nRet = REvmp_getContextIndex(s._data);
		tmp._reg = nRet;
//		printf("%x\n",nRet);
	}

	sim_vc.push_back( tmp);
}

int vmp_FindAndSetToStruct_pop_context_word( const _struct_data& s)
{
	return s._var[0] == 2 && s._var[1] == 2 && s._var[2] == 1 && s._var[3] == 0;
}

void REvmp_FindAndSetToStruct_pop_context_word( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;


	tmp._rva = s._rva;
	
	//寄存器
	
	char nRet = REvmp_getContextIndex(s._data);
	tmp._reg = nRet;
//	printf("%x\n",nRet);

	sim_vc.push_back(tmp);
}

int vmp_FindAndSetToStruct_pop_context_dword( const _struct_data& s)
{
	return s._var[0] == 2 && s._var[1] == 2 && s._var[2] == 2 && s._var[3] == 0;
}

void REvmp_FindAndSetToStruct_pop_context_dword( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;

	
	tmp._rva = s._rva;
	//寄存器

	char nRet = REvmp_getContextIndex(s._data);
	tmp._reg = nRet;
//	printf("%x\n",nRet);

	sim_vc.push_back(tmp);
}

int vmp_FindAndSetToStruct_pop_sp_esp( const _struct_data& s)
{
	return s._var[0] == 2 && s._var[1] == 2 &&  
		(
		(s._var[2] == 1 || s._var[2] == 2) && s._var[3] == 1
		);
}

void REvmp_FindAndSetToStruct_pop_sp_esp( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];;
	tmp._var[3] = 0;
	tmp._reg = 4;

	tmp._rva = s._rva;

	sim_vc.push_back(tmp);
}

int vmp_FindAndSetToStruct_pop_segment_mem( const _struct_data& s)
{
	return s._var[0] == 2 && s._var[1] == 3;
}

void REvmp_FindAndSetToStruct_pop_segment_mem( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = vmp_get_index(s._var[3]);	

	tmp._rva = s._rva;

	sim_vc.push_back(tmp);
}

int vmp_FindAndSetToStruct_pop_segment( const _struct_data& s)
{
	return s._var[0] == 2 && s._var[1] == 5 && s._var[2] == 1;
}

void REvmp_FindAndSetToStruct_pop_segment( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;

	tmp._rva = s._rva;

	tmp._reg = s._var[3];
	sim_vc.push_back(tmp);
}

int vmp_FindAndSetToStruct_pop_crindex( const _struct_data& s)
{
	return s._var[0] == 2 && s._var[1] == 6 && s._var[2] == 2;
}

void REvmp_FindAndSetToStruct_pop_crindex( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;

	tmp._rva = s._rva;

	tmp._reg = s._var[3];
	sim_vc.push_back(tmp);
}

int vmp_FindAndSetToStruct_pop_drindex( const _struct_data& s)
{
	return s._var[0] == 2 && s._var[1] == 7 && s._var[2] == 2;
}

void REvmp_FindAndSetToStruct_pop_drindex( const _struct_data& s)
{
	_struct_data tmp;
	tmp._var[0] = s._var[0];
	tmp._var[1] = s._var[1];
	tmp._var[2] = s._var[2];
	tmp._var[3] = 0;

	tmp._rva = s._rva;

	tmp._reg = s._var[3];
	sim_vc.push_back(tmp);
}
/************************************************************************/
/* search                                                               */
/************************************************************************/
typedef int (*vis_func)(const _struct_data& s);
typedef void (*REvis_func)(const _struct_data& s);

vis_func vf[] = {
	vmp_FindAndSetToStruct_lodsb_push,
	vmp_FindAndSetToStruct_lodsb_cwde_push,
	vmp_FindAndSetToStruct_lodsw_push,
	vmp_FindAndSetToStruct_lodsw_cwde_push,
	vmp_FindAndSetToStruct_lodsd_push,
	vmp_FindAndSetToStruct_push_context_byte,
	vmp_FindAndSetToStruct_push_context_word,
	vmp_FindAndSetToStruct_push_context_dword,
	vmp_FindAndSetToStruct_push_esp_sp,
	vmp_FindAndSetToStruct_push_segment_mem,
	vmp_FindAndSetToStruct_push_segment,
	vmp_FindAndSetToStruct_push_crindex,
	vmp_FindAndSetToStruct_push_drindex,
	vmp_FindAndSetToStruct_pop_ax_eax,
	vmp_FindAndSetToStruct_pop_context_byte,
	vmp_FindAndSetToStruct_pop_context_word,
	vmp_FindAndSetToStruct_pop_context_dword,
	vmp_FindAndSetToStruct_pop_sp_esp,
	vmp_FindAndSetToStruct_pop_segment_mem,
	vmp_FindAndSetToStruct_pop_segment,
	vmp_FindAndSetToStruct_pop_crindex,
	vmp_FindAndSetToStruct_pop_drindex
};

REvis_func revf[] = {
	REvmp_FindAndSetToStruct_lodsb_push,
	REvmp_FindAndSetToStruct_lodsb_cwde_push,
	REvmp_FindAndSetToStruct_lodsw_push,
	REvmp_FindAndSetToStruct_lodsw_cwde_push,
	REvmp_FindAndSetToStruct_lodsd_push,//above push ex_eax
	REvmp_FindAndSetToStruct_push_context_btye,
	REvmp_FindAndSetToStruct_push_context_word,
	REvmp_FindAndSetToStruct_push_context_dword,
	REvmp_FindAndSetToStruct_push_esp_sp,
	REvmp_FindAndSetToStruct_push_segment_mem,
	REvmp_FindAndSetToStruct_push_segment,
	REvmp_FindAndSetToStruct_push_crindex,
	REvmp_FindAndSetToStruct_push_drindex,
	REvmp_FindAndSetToStruct_pop_ax_eax,
	REvmp_FindAndSetToStruct_pop_context_byte,
	REvmp_FindAndSetToStruct_pop_context_word,
	REvmp_FindAndSetToStruct_pop_context_dword,
	REvmp_FindAndSetToStruct_pop_sp_esp,
	REvmp_FindAndSetToStruct_pop_segment_mem,
	REvmp_FindAndSetToStruct_pop_segment,
	REvmp_FindAndSetToStruct_pop_crindex,
	REvmp_FindAndSetToStruct_pop_drindex
};



void REvmp_FindAndSetToStruct( int index)
{
	char _var1 = vc[index]._var[0];
	if( (unsigned)_var1 > 0xC4)
	{
		switch( _var1)
		{
		case 0xC6:
		case 0xC8:
		case 0xC9:
		case 0xCF:
		case 0xD0:
		case 0xD1:
		case 0xD2:
		case 0xD3:
		case 0xD4:
		case 0xD6:
		case 0xD7:
		case 0xD8:
		case 0xD9:
		case 0xDB:
		case 0xDD:
		case 0xDF:
		case 0xE0:
		case 0xE1:
		case 0xE3:
		case 0xE5:
		case 0xE6:
		case 0xEE:
		case 0xF8:
			{
				REvmp_findandsettostruct_func104(vc[index]);
				return;
			}
		case 0xF6:
			{
				REvmp_findandsettostruct_func101(vc[index]);
				return;
			}
		case 0xF7:
			{
				REvmp_findandsettostruct_func3(vc[index]);
				break;
			}
		default:
			break;
		}
	}
	if( (unsigned)_var1 == 0xC4)
	{
		REvmp_findandsettostruct_func104(vc[index]);
		return;
	}
	if( (unsigned)_var1 > 0x40)
	{
		REvmp_findandsettostruct_func104(vc[index]);
		return;
	}
	if( (unsigned)_var1 == 0x40)
	{
		REvmp_findandsettostruct_func101(vc[index]);
		return;
	}
	if( (unsigned)_var1 > 0x2E)
	{
		if( (unsigned)_var1 != 0x3D)
		{
			if( (unsigned)_var1 == 0x3E)
			{
				REvmp_findandsettostruct_func101(vc[index]);
				return;
			}
			if( (unsigned)_var1 != 0x3F)
				return;
			REvmp_findandsettostruct_func104(vc[index]);
		}
	}
	if( (unsigned)_var1 == 0x2E)
	{
		REvmp_findandsettostruct_func104(vc[index]);
	}

	if( (unsigned)_var1 >= 3)
	{
		if( (unsigned)_var1 != 4 && (unsigned)_var1 >= 0x1E)
			return;
		REvmp_findandsettostruct_func101(vc[index]);
	}

	int _func_size = sizeof(vf) / 4;
	for( int i = 0; i < _func_size; i++)
	{
		if(vf[i](vc[index]) == 1)
		{
			revf[i](vc[index]);
			return;
		}
	}
}

/************************************************************************/
/* init                                                                 */
/************************************************************************/
void ProcessEsiEncode::_GetVmpEncdoes( char **_buf)
{
	int jmp_push_esi = 0, _push_esi = 0, _vm_esi = 0;
	int _vm_hanle_entry = 0;
	int _vm_handle_table = 0;
	int _handle_tpye = 0;


	int _offset = (int)*_buf;

	_vm_entry = _CLAC1( _vm_entry, _BASEADDR, _offset);//_vm_entry - 0x400000 + (int)*_buf;//以默认0x400000计算
	_push_esi = *(int*)( (char*)_vm_entry + 1);
	jmp_push_esi = _vm_entry + 5 + _push_esi;
	//esi数组
	_vm_esi = *(int*)( (char*)jmp_push_esi + 1);
	_vm_hanle_entry = jmp_push_esi + 10 + *(int*)( (char*)jmp_push_esi + 6);
	_handle_tpye = _get_handle_type((char*)_vm_hanle_entry);
	if( _handle_tpye == -1)
		return;
	_vm_pos_dispathcer = _ms[ _handle_tpye]._offset;
	//handler_table
	_vm_handle_table = *(int*)( (char*)_vm_hanle_entry + _vm_pos_dispathcer);
	//edi


	const int _vm_size = 256;

	int _vm_handle_table_offset[_vm_size] = {0};
	struct _vm_rand_handle
	{
		unsigned char _n;
		unsigned char _index[_vm_size];

		struct _vm_rand_handle()
		{
			_n = 0;
			memset( _index, 0, sizeof(_index));
		}
	};
	struct _vm_rand_handle _vm_randindex[_vm_size];

	for( int i = 0; i < _vm_size; i++)
	{
		_vm_handle_table_offset[i] = ((int*)_vm_handle_table)[i] - _vm_hanle_entry;
	}
	for( int i = 0; i < _vm_size; i++)
	{
		for( int j = 0; j < _vm_size; j++)
		{
			if( _vm_handle_table_offset[i] == vm_handle_offset[j])//[_handle_type][j])
			{
				int index = _vm_randindex[i]._n;				
				_vm_randindex[i]._index[index] = j;
				_vm_randindex[i]._n++;
			}
		}
	}

	int _esi_size = jmp_push_esi - _vm_esi;
	char *p = (char*)_vm_esi;
	for( int i = 0; i < _esi_size; )
	{
		int _randindex = _vm_randindex[(unsigned char)*p]._index[0];

		int _vmp_opcode_size =  _vmp_regulation_size[_randindex];
		struct _struct_data _tmp;
		_tmp._rva = _CLAC1( (int)p , _offset, _BASEADDR);
		for( int j = 0; j < _var_size; j++)
		{
			_tmp._var[j] = _vmp_regulation[ _randindex * 8 + _var_index[j]];
		}
		switch( _vmp_opcode_size)
		{
		case 2:
			{
				_tmp._data = *(char*)(p+1);
				break;
			}
		case 3:
			{
				_tmp._data = *(short*)(p+1);
				break;
			}
		case 5:
			{
				_tmp._data = *(int*)(p+1);
				break;
			}
		default:
			break;
		}

		_tmp._size = _vmp_opcode_size;
		i += _vmp_opcode_size;
		p += _vmp_opcode_size;

		vc.push_back( _tmp);
	}
	//context
	int _contextindex[] = {
		0xa,
		0x7,0x6,0x5,0xff,0x3,0x2,0x1,0x0,
		0x8
	};
	int _contextsize = sizeof(_contextindex) / 4;
	for( int i = 0; i < _contextsize; i++)
	{
		_context[_contextindex[i]] = vc[i]._data;
	}
	for( int i = 0; i < _contextsize; i++)
	{
		if( _context[i] != -1)
		{
			_sure_context++;
		}
	}

	int _vc_size = vc.size();
	for( int i = 0; i < _vc_size; i++)
	{
		REvmp_FindAndSetToStruct(i);
	}
	_FreeVector(vc);
}